{
  "define": {
    # Import from Args file with --jx-args cmd option
    # "DATA_FILE_LIST"


    "IRODS_BASE_PATH": "/iplant/home/elyons/ACIC/2019-final-gantry-data/stereoTop/",
    "TARBALL": "",

    "CLEANED_META_DIR": "cleanmetadata_out/",
    "TIFS_DIR": "bin2tif_out/",
    "SOILMASK_DIR": "soil_mask_out/",
    "FIELDMOSAIC_DIR": "fieldmosaic_out/",
    "CANOPYCOVER_DIR": "canopy_cover_out/",
    "BETYDB_URL": "https://terraref.ncsa.illinois.edu/bety/",
    "BETYDB_KEY": "9999999999999999999999999999999999999999",

    "METADATA_CLEANED_LIST": [ CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json" for DATA_SET in DATA_FILE_LIST ],
    "LEFT_SOILMASK_LIST": [ SOILMASK_DIR + DATA_SET["UUID"] + "_left_mask.tif" for DATA_SET in DATA_FILE_LIST ],
    "RIGHT_SOILMASK_LIST": [ SOILMASK_DIR + DATA_SET["UUID"] + "_right_mask.tif" for DATA_SET in DATA_FILE_LIST ],
    "MOSAIC_LIST_FILE": FIELDMOSAIC_DIR + "filelist.txt",

    "SENSOR": "stereoTop",
    "MOSAIC_BOUNDS": "-111.9750963 33.0764953 -111.9747967 33.074485715"
  },
  "rules": [
    {
      "command": "bash gen_args.sh > ${UUID}_args.jx",
      "environment": {
        "RAW_DATA_PATH": DATA_SET["PATH"],
        "UUID": DATA_SET["UUID"]
      },
      "inputs": [ "gen_args.sh" ],
      "outputs": [ DATA_SET["UUID"] + "_args.jx" ]
    } for DATA_SET in DATA_FILE_LIST,

   {
      # Make a cleaned copy of the metadata
      "command": "mkdir -p ${WORKING_SPACE} && BETYDB_LOCAL_CACHE_FOLDER=cached_betydb/ BETYDB_URL=${BETYDB_URL} BETYDB_KEY=${BETYDB_KEY} singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/cleanmetadata:latest --metadata ${METADATA} --working_space ${WORKING_SPACE} ${SENSOR} ${USERID}",
      "environment": {
        "SENSOR": "stereoTop",
        "METADATA": DATA_SET["PATH"] + DATA_SET["UUID"] + "_metadata.json",
        "WORKING_SPACE": CLEANED_META_DIR,
        "USERID": ""
      },
      "inputs": [ DATA_SET["PATH"] + DATA_SET["UUID"] + "_metadata.json", "cached_betydb/bety_experiments.json" ],
      "outputs": [
        CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json"
      ]
    } for DATA_SET in DATA_FILE_LIST,

    {
      # Convert LEFT bin/RGB image to TIFF format
      "command": "mkdir -p ${WORKING_SPACE} && singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/bin2tif:latest --result print --metadata ${METADATA} --working_space ${WORKING_SPACE} ${LEFT_BIN}",
      "environment": {
        "LEFT_BIN": DATA_SET["PATH"] + DATA_SET["UUID"] + "_left.bin",
        "METADATA": CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json",
        "WORKING_SPACE": TIFS_DIR
      },
      "inputs": [
        DATA_SET["PATH"] + DATA_SET["UUID"] + "_left.bin",
        CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json"
      ],
      "outputs": [
        TIFS_DIR + DATA_SET["UUID"] + "_left.tif"
      ]
    } for DATA_SET in DATA_FILE_LIST,
    {
      # Convert RIGHT bin/RGB image to TIFF format
      "command": "mkdir -p ${WORKING_SPACE} && singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/bin2tif:latest --result print --metadata ${METADATA} --working_space ${WORKING_SPACE} ${RIGHT_BIN}",
      "environment": {
        "RIGHT_BIN": DATA_SET["PATH"] + DATA_SET["UUID"] + "_right.bin",
        "METADATA": CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json",
        "WORKING_SPACE": TIFS_DIR
      },
      "inputs": [
        DATA_SET["PATH"] + DATA_SET["UUID"] + "_right.bin",
        CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json"
      ],
      "outputs": [
        TIFS_DIR + DATA_SET["UUID"] + "_right.tif"
      ]
    } for DATA_SET in DATA_FILE_LIST,

    {
      # Generate soil mask from LEFT TIFF image
      "command": "mkdir -p ${WORKING_SPACE} && singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/soilmask:latest --result print --metadata ${METADATA} --working_space ${WORKING_SPACE} ${LEFT_TIF}",
      "environment": {
        "LEFT_TIF": TIFS_DIR + DATA_SET["UUID"] + "_left.tif",
        "METADATA": CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json",
        "WORKING_SPACE": SOILMASK_DIR
      },
      "inputs": [
        TIFS_DIR + DATA_SET["UUID"] + "_left.tif",
        CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json"
      ],
      "outputs": [
        SOILMASK_DIR + DATA_SET["UUID"] + "_left_mask.tif"
      ]
    } for DATA_SET in DATA_FILE_LIST,
    {
      # Generate soil mask from RIGHT TIFF image
      "command": "mkdir -p ${WORKING_SPACE} && singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/soilmask:latest --result print --metadata ${METADATA} --working_space ${WORKING_SPACE} ${RIGHT_TIF}",
      "environment": {
        "RIGHT_TIF": TIFS_DIR + DATA_SET["UUID"] + "_right.tif",
        "METADATA": CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json",
        "WORKING_SPACE": SOILMASK_DIR
      },
      "inputs": [
        TIFS_DIR + DATA_SET["UUID"] + "_right.tif",
        CLEANED_META_DIR + DATA_SET["UUID"] + "_metadata_cleaned.json"
      ],
      "outputs": [
        SOILMASK_DIR + DATA_SET["UUID"] + "_right_mask.tif"
      ]
    } for DATA_SET in DATA_FILE_LIST,





    {
      # Make directory to store FIELDMOSAIC files
      "command": "mkdir -p ${FIELDMOSAIC_DIR}",
      "environment": {
        "FIELDMOSAIC_DIR": FIELDMOSAIC_DIR
      },
      "inputs": [],
      "outputs": [
        FIELDMOSAIC_DIR
      ]
    },
    {
      # Create MOSAIC_LIST_FILE file from the soilmask files
      "command": "ls ${SOILMASK_DIR}*.tif > ${MOSAIC_LIST_FILE}",
      "environment": {
        "SOILMASK_DIR": SOILMASK_DIR,
        "MOSAIC_LIST_FILE": MOSAIC_LIST_FILE
      },
      "inputs": [
        FIELDMOSAIC_DIR
      ] + LEFT_SOILMASK_LIST + RIGHT_SOILMASK_LIST,
      "outputs": [
        MOSAIC_LIST_FILE
      ]
    },


    {
      # Generate field mosaic from soil mask TIFFs
      "command": "singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/fieldmosaic:latest --result print --metadata ${METADATA} --working_space ${WORKING_SPACE} ${MOSAIC_LIST_FILE} ${SENSOR} \"${MOSAIC_BOUNDS}\"",
      "environment": {
        "MOSAIC_LIST_FILE": MOSAIC_LIST_FILE,
        "METADATA": METADATA_CLEANED_LIST[0],
        "WORKING_SPACE": FIELDMOSAIC_DIR,
        "SENSOR": "stereoTop",
        "MOSAIC_BOUNDS": MOSAIC_BOUNDS
      },
      "inputs": [
        FIELDMOSAIC_DIR,
        MOSAIC_LIST_FILE,
        METADATA_CLEANED_LIST[0]
      ],
      "outputs": [
        FIELDMOSAIC_DIR + "fullfield_mosaic.png",
        FIELDMOSAIC_DIR + "fullfield_mosaic.png.aux.xml",
        FIELDMOSAIC_DIR + "fullfield_mosaic.tif",
        FIELDMOSAIC_DIR + "fullfield_mosaic.vrt",
        FIELDMOSAIC_DIR + "fullfield_mosaic_10pct.tif",
        FIELDMOSAIC_DIR + "fullfield_mosaic_thumb.tif"
      ]
    },
    {
      # Generate canopy cover from field mosaic
      "comand": "mkdir -p ${WORKING_SPACE} && singularity run -B $(pwd):/mnt --pwd /mnt docker://agpipeline/canopycover:latest --debug --result print --metadata ${METADATA} --working_space ${WORKING_SPACE} ${CANOPY_COVER_INPUT_FILE}",
      "environment": {
        "METADATA": METADATA_CLEANED_LIST[0],
        "WORKING_SPACE": CANOPYCOVER_DIR,
        "CANOPY_COVER_INPUT_FILE": FIELDMOSAIC_DIR + "fullfield_mosaic.tif"
      },
      "inputs": [
        METADATA_CLEANED_LIST[0],
        FIELDMOSAIC_DIR + "fullfield_mosaic.tif"
      ],
      "outputs": [
        CANOPYCOVER_DIR + "canopycover.csv",
        CANOPYCOVER_DIR + "canopycover_geostreams.csv"
      ]
    }
  ]
}
